[
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useConnect"
    },
    "content": "/**\n * A hook to set a wallet as active wallet\n * @returns A function that lets you connect a wallet.\n * @example\n * ```jsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnect } from \"thirdweb/react\";\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const client = createThirdwebClient({\n *   clientId: \"YOUR_CLIENT_ID\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting, error } = useConnect();\n *   return (\n *     <button\n *       onClick={() =>\n *         connect(async () => {\n *           // instantiate wallet\n *           const wallet = createWallet(\"io.metamask\");\n *           // connect wallet\n *           await wallet.connect({\n *             client,\n *           });\n *           // return the wallet\n *           return wallet;\n *         })\n *       }\n *     >\n *       Connect\n *     </button>\n *   );\n * }\n * ```\n * @walletConnection\n */\nexport function useConnect(options?: ConnectManagerOptions) {\n  const manager = useConnectionManagerCtx(\"useConnect\");\n  const { connect } = manager;\n  const setConnectionStatus = useSetActiveWalletConnectionStatus();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const handleConnection = useCallback(\n    async (walletOrFn: Wallet | (() => Promise<Wallet>)) => {\n      // reset error state\n      setError(null);\n      setConnectionStatus(\"connecting\");\n      if (typeof walletOrFn !== \"function\") {\n        const account = await connect(walletOrFn, options);\n        setConnectionStatus(\"connected\");\n        return account;\n      }\n\n      setIsConnecting(true);\n      try {\n        const w = await walletOrFn();\n        const account = await connect(w, options);\n        setConnectionStatus(\"connected\");\n        return account;\n      } catch (e) {\n        console.error(e);\n        setError(e as Error);\n        setConnectionStatus(\"disconnected\");\n      } finally {\n        setIsConnecting(false);\n      }\n      return null;\n    },\n    [connect, options, setConnectionStatus],\n  );\n\n  return { connect: handleConnection, isConnecting, error } as const;\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "AllWalletsList"
    },
    "content": "export function AllWalletsList(\n  props: ExternalWalletsUiProps & { externalWallets: Wallet[] },\n) {\n  const { connector, client, theme, externalWallets } = props;\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const walletsToShow = useMemo(() => {\n    const filteredWallets = walletInfos\n      .filter(\n        (info) => !externalWallets.find((wallet) => wallet.id === info.id),\n      )\n      .filter((info) => info.hasMobileSupport);\n\n    const fuse = new Fuse(filteredWallets, {\n      keys: [\"name\"],\n      threshold: 0.3,\n    });\n\n    return searchQuery\n      ? fuse.search(searchQuery).map((result) => result.item.id)\n      : filteredWallets.map((info) => info.id);\n  }, [externalWallets, searchQuery]);\n\n  const connectWallet = (wallet: Wallet) => {\n    connector({\n      wallet,\n      connectFn: async (chain) => {\n        await wallet.connect({\n          client,\n          chain,\n        });\n        return wallet;\n      },\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.searchContainer}>\n        <ThemedInput\n          theme={theme}\n          leftView={\n            <View\n              style={{\n                padding: spacing.sm,\n                width: 48,\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n              }}\n            >\n              <RNImage\n                data={SEARCH_ICON}\n                size={24}\n                theme={theme}\n                color={theme.colors.secondaryIconColor}\n              />\n            </View>\n          }\n          placeholder=\"Search Wallet\"\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n        />\n      </View>\n      <Spacer size=\"md\" />\n      <FlatList\n        style={{\n          flex: 1,\n          paddingHorizontal: props.containerType === \"modal\" ? spacing.lg : 0,\n          paddingBottom: spacing.md,\n        }}\n        data={walletsToShow}\n        renderItem={({ item: walletId }) => (\n          <ExternalWalletRow\n            key={walletId}\n            wallet={createWallet(walletId as WalletId)}\n            connectWallet={connectWallet}\n            theme={theme}\n          />\n        )}\n        keyExtractor={(walletId) => walletId}\n        ItemSeparatorComponent={() => <View style={{ height: spacing.md }} />}\n      />\n    </View>\n  );\n}"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "CreateWalletConnectClientOptions"
    },
    "content": "type CreateWalletConnectClientOptions = Prettify<\n  WalletConnectConfig & {\n    /**\n     * Your application's thirdweb client.\n     */\n    client: ThirdwebClient;\n\n    /**\n     * The wallet to connect to the WalletConnect URI.\n     */\n    wallet: Wallet;\n\n    /**\n     * Any chains to enable for the wallet. Apps can request access to specific chains, but this list will always be available for use with the wallet.\n     */\n    chains?: Chain[];\n\n    /**\n     * Custom RPC handlers to override the defaults. Useful when creating a custom approval UI.\n     */\n    requestHandlers?: WalletConnectRequestHandlers;\n\n    /**\n     * Callback triggered whenever a session is successfully created.\n     */\n    onConnect?: (session: WalletConnectSession) => void;\n\n    /**\n     * Callback triggered whenever a session is disconnected.\n     */\n    onDisconnect?: (session: WalletConnectSession) => void;\n\n    /**\n     * Callback for handling errors.\n     */\n    onError?: (error: Error) => void;\n  }\n>;"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "walletToViem"
    },
    "content": "function walletToViem(options: WalletToViemOptions): WalletClient {\n  const { wallet, chain, client } = options;\n\n  if (!wallet.getAccount()) {\n    throw new Error(\"Wallet is not connected.\");\n  }\n\n  const rpcUrl = getRpcUrlForChain({ chain, client });\n  const viemChain: ViemChain = {\n    id: chain.id,\n    name: chain.name || \"\",\n    rpcUrls: {\n      default: { http: [rpcUrl] },\n    },\n    nativeCurrency: {\n      name: chain.nativeCurrency?.name || \"Ether\",\n      symbol: chain.nativeCurrency?.symbol || \"ETH\",\n      decimals: chain.nativeCurrency?.decimals || 18,\n    },\n  };\n\n  const eip1193Provider = toProvider({\n    chain,\n    client,\n    wallet,\n  });\n  return createWalletClient({\n    transport: custom({\n      request: (request) => eip1193Provider.request(request),\n    }),\n    account: wallet.getAccount()?.address,\n    chain: viemChain,\n    key: \"thirdweb-wallet\",\n  });\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "Modal"
    },
    "content": "function Modal(\n  props: UseConnectModalOptions & {\n    onConnect: (wallet: Wallet) => void;\n    onClose: () => void;\n    connectLocale: ConnectLocale;\n  },\n) {\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.size || \"wide\";\n  }, [props.size, wallets.length]);\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: props.title,\n      titleIconUrl: props.titleIcon,\n    };\n  }, [\n    props.privacyPolicyUrl,\n    props.showThirdwebBranding,\n    props.termsOfServiceUrl,\n    props.title,\n    props.titleIcon,\n  ]);\n\n  return (\n    <WalletUIStatesProvider theme={props.theme} isOpen={true}>\n      <ConnectModal\n        onClose={props.onClose}\n        shouldSetActive={props.setActive === undefined ? true : props.setActive}\n        accountAbstraction={props.accountAbstraction}\n        auth={props.auth}\n        chain={props.chain}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        meta={meta}\n        size={size}\n        welcomeScreen={props.welcomeScreen}\n        localeId={props.locale || \"en_US\"}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        showAllWallets={props.showAllWallets}\n        wallets={wallets}\n        chains={props.chains}\n        walletConnect={props.walletConnect}\n      />\n    </WalletUIStatesProvider>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "WalletManangerButton"
    },
    "content": "function WalletManangerButton(props: {\n  wallet: Wallet;\n  client: ThirdwebClient;\n  chain: Chain;\n  onClick: () => void;\n}) {\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const { disconnect } = useDisconnect();\n  const walletId = props.wallet.id;\n  const address = props.wallet.getAccount()?.address;\n  const balanceQuery = useWalletBalance({\n    address: address,\n    chain: props.chain,\n    client: props.client,\n  });\n\n  return (\n    <div\n      style={{\n        position: \"relative\",\n      }}\n    >\n      <WalletButtonEl\n        onClick={props.onClick}\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Container flex=\"row\" gap=\"md\" center=\"y\">\n          <WalletImage client={props.client} id={walletId} size={iconSize.lg} />\n\n          <Container flex=\"column\" gap=\"4xs\">\n            <Text color=\"primaryText\">{shortenAddress(address || \"\")}</Text>\n            {balanceQuery.data ? (\n              <Text size=\"xs\" color=\"secondaryText\" weight={400}>\n                {formatTokenBalance(balanceQuery.data)}\n              </Text>\n            ) : (\n              <Skeleton width=\"100px\" height={fontSize.sm} />\n            )}\n          </Container>\n        </Container>\n      </WalletButtonEl>\n\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 1,\n          right: spacing.xxs,\n          top: \"50%\",\n          transform: \"translateY(-50%)\",\n        }}\n      >\n        {activeWallet?.id === props.wallet.id ? (\n          <ToolTip tip=\"Active Wallet\">\n            <IconButton>\n              <CheckIcon width={iconSize.md} height={iconSize.md} />\n            </IconButton>\n          </ToolTip>\n        ) : (\n          <ToolTip tip=\"Disconnect\">\n            <IconButton\n              onClick={() => {\n                disconnect(props.wallet);\n              }}\n            >\n              <MinusIcon\n                width={iconSize.md}\n                height={iconSize.md}\n                style={{\n                  color: theme.colors.secondaryText,\n                }}\n              />\n            </IconButton>\n          </ToolTip>\n        )}\n      </div>\n    </div>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useConnectModal"
    },
    "content": "/**\n * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnectModal } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting } = useConnectModal();\n *\n *   async function handleConnect() {\n *      const wallet = await connect({ client }); // opens the connect modal\n *      console.log('connected to', wallet);\n *   }\n *\n *   return <button onClick={handleConnect}> Connect </button>\n * }\n * ```\n *\n * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.\n *\n * @walletConnection\n */\nexport function useConnectModal() {\n  const setRootEl = useContext(SetRootElementContext);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connect = useCallback(\n    (props: UseConnectModalOptions) => {\n      function cleanup() {\n        setIsConnecting(false);\n        setRootEl(undefined);\n      }\n\n      return new Promise<Wallet>((resolve, reject) => {\n        setIsConnecting(true);\n        getConnectLocale(props.locale || \"en_US\")\n          .then((locale) => {\n            setRootEl(\n              <Modal\n                {...props}\n                onConnect={(w) => {\n                  if (props.auth) return;\n                  resolve(w);\n                  cleanup();\n                }}\n                onClose={() => {\n                  reject();\n                  cleanup();\n                }}\n                connectLocale={locale}\n              />,\n            );\n          })\n          .catch(() => {\n            reject();\n            cleanup();\n          });\n      });\n    },\n    [setRootEl],\n  );\n\n  return { connect, isConnecting };\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "walletConnect"
    },
    "content": "/**\n * Creates a wallet that allows connecting to any wallet that supports the WalletConnect protocol.\n * @returns The created smart wallet.\n * @example\n * ```ts\n * import { walletConnect } from \"thirdweb/wallets\";\n *\n * const wallet = walletConnect();\n *\n * const account = await wallet.connect({\n *  client\n * });\n * ```\n * @wallet\n */\nexport function walletConnect() {\n  return createWallet(\"walletConnect\");\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "walletConnect"
    },
    "content": "/**\n * Creates a wallet that allows connecting to any wallet that supports the WalletConnect protocol.\n * @returns The created smart wallet.\n * @example\n * ```ts\n * import { walletConnect } from \"thirdweb/wallets\";\n *\n * const wallet = walletConnect();\n *\n * const account = await wallet.connect({\n *  client\n * });\n * ```\n * @wallet\n */\nexport function walletConnect() {\n  return createWallet(\"walletConnect\");\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "createWallet"
    },
    "content": "/**\n * Creates a wallet based on the provided ID and arguments.\n * @param args - The arguments for creating the wallet.\n * @returns - The created wallet.\n * @example\n * ```ts\n * import { createWallet } from \"thirdweb/wallets\";\n *\n * const metamaskWallet = createWallet(\"io.metamask\");\n *\n * const account = await metamaskWallet.connect({\n *  client,\n * });\n * ```\n * @wallet\n */\nexport function createWallet<const ID extends WalletId>(\n  ...args: CreateWalletArgs<ID>\n): Wallet<ID> {\n  const [id, creationOptions] = args;\n\n  switch (true) {\n    /**\n     * SMART WALLET\n     */\n    case id === \"smart\": {\n      // same as web\n      return smartWallet(\n        creationOptions as CreateWalletArgs<\"smart\">[1],\n      ) as Wallet<ID>;\n    }\n    /**\n     * IN-APP WALLET\n     */\n    case id === \"embedded\":\n    case id === \"inApp\": {\n      return inAppWallet(\n        creationOptions as CreateWalletArgs<\"inApp\">[1],\n      ) as Wallet<ID>;\n    }\n\n    /**\n     * ECOSYSTEM WALLETS\n     */\n    case isEcosystemWallet(id): {\n      return ecosystemWallet(\n        ...(args as CreateWalletArgs<EcosystemWalletId>),\n      ) as Wallet<ID>;\n    }\n\n    /**\n     * COINBASE WALLET VIA SDK\n     * -> if no injected coinbase found, we'll use the coinbase SDK\n     */\n    case id === COINBASE: {\n      const options = creationOptions as CreateWalletArgs<typeof COINBASE>[1];\n      return coinbaseWalletSDK({\n        createOptions: options,\n        providerFactory: () => getCoinbaseMobileProvider(options),\n      }) as Wallet<ID>;\n    }\n\n    /**\n     * WALLET CONNECT only in react native for everything else\n     */\n    default: {\n      const emitter = createWalletEmitter<ID>();\n      let account: Account | undefined = undefined;\n      let chain: Chain | undefined = undefined;\n\n      const unsubscribeChain = emitter.subscribe(\"chainChanged\", (newChain) => {\n        chain = newChain;\n      });\n\n      function reset() {\n        account = undefined;\n        chain = undefined;\n      }\n\n      let handleDisconnect = async () => {};\n\n      const unsubscribeDisconnect = emitter.subscribe(\"disconnect\", () => {\n        reset();\n        unsubscribeChain();\n        unsubscribeDisconnect();\n      });\n\n      emitter.subscribe(\"accountChanged\", (_account) => {\n        account = _account;\n      });\n\n      let handleSwitchChain: (chain: Chain) => Promise<void> = async () => {\n        throw new Error(\"Not implemented yet\");\n      };\n\n      const sessionHandler = async (uri: string) => {\n        try {\n          await Linking.openURL(uri);\n        } catch {\n          console.error(`Failed to open URI: ${uri} - is the app installed?`);\n          // TODO: figure out how to propage this error to the UI\n          throw new Error(`Failed to open URI: ${uri} - is the app installed?`);\n        }\n      };\n\n      const wallet: Wallet<ID> = {\n        id,\n        subscribe: emitter.subscribe,\n        getConfig: () => args[1],\n        getChain() {\n          if (!chain) {\n            return undefined;\n          }\n\n          chain = getCachedChainIfExists(chain.id) || chain;\n          return chain;\n        },\n        getAccount: () => account,\n        autoConnect: async (\n          options: WalletAutoConnectionOption<WCSupportedWalletIds>,\n        ) => {\n          if (options && \"client\" in options) {\n            const { autoConnectWC } = await import(\n              \"../wallet-connect/controller.js\"\n            );\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await autoConnectWC(\n              options,\n              emitter,\n              wallet.id as WCSupportedWalletIds,\n              nativeLocalStorage,\n              sessionHandler,\n            );\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            trackConnect({\n              client: options.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            // return account\n            return account;\n          }\n          throw new Error(\"Failed to auto connect\");\n        },\n        connect: async (options) => {\n          async function wcConnect(wcOptions: WCConnectOptions) {\n            const { connectWC } = await import(\n              \"../wallet-connect/controller.js\"\n            );\n\n            const [\n              connectedAccount,\n              connectedChain,\n              doDisconnect,\n              doSwitchChain,\n            ] = await connectWC(\n              wcOptions,\n              emitter,\n              wallet.id as WCSupportedWalletIds | \"walletConnect\",\n              nativeLocalStorage,\n              sessionHandler,\n            );\n            // set the states\n            account = connectedAccount;\n            chain = connectedChain;\n            handleDisconnect = doDisconnect;\n            handleSwitchChain = doSwitchChain;\n            trackConnect({\n              client: wcOptions.client,\n              walletType: id,\n              walletAddress: account.address,\n              chainId: chain.id,\n            });\n            return account;\n          }\n\n          if (id === \"walletConnect\") {\n            const { client, chain: _chain, ...walletConnectOptions } = options;\n\n            return wcConnect({\n              client,\n              chain: _chain,\n              walletConnect: {\n                ...walletConnectOptions,\n              },\n            });\n          }\n\n          if (options && \"client\" in options) {\n            return wcConnect(options);\n          }\n          throw new Error(\"Failed to connect\");\n        },\n        // these get overridden in connect and autoConnect\n        disconnect: async () => {\n          reset();\n          await handleDisconnect();\n        },\n        switchChain: (c) => handleSwitchChain(c),\n      };\n      return wallet;\n    }\n  }\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "createWalletAdapter"
    },
    "content": "/**\n * Creates a wallet from the given account.\n *\n * You can use this to:\n *\n * - convert a third party library wallet (wagmi, viem, ethers) into a thirdweb wallet.\n * - connect with a private key (for automated tests)\n *\n * Available wallet adatpers:\n * - [Viem](https://portal.thirdweb.com/references/typescript/v5/viemAdapter)\n * - [Ethers 6](https://portal.thirdweb.com/references/typescript/v5/ethers6Adapter)\n * - [Ethers 5](https://portal.thirdweb.com/references/typescript/v5/ethers5Adapter)\n *\n * @param options - The options for the adapter wallet.\n * @returns a wallet instance.\n *\n * @example\n * ```ts\n * import { createWalletAdapter } from \"thirdweb\";\n *\n * const wallet = createWalletAdapter({\n *  client,\n *  adaptedAccount,\n *  chain,\n *  onDisconnect: () => {\n *    // disconnect logic\n *  },\n *  switchChain: async (chain) => {\n *    // switch chain logic\n *  },\n * });\n * ```\n * @wallet\n */\nexport declare function createWalletAdapter(options: AdapterWalletOptions): Wallet<\"adapter\">;"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "toViemWalletClient"
    },
    "content": "function toViemWalletClient(options: ToViemWalletClientOptions): WalletClient {\n  const { account, chain, client } = options;\n  if (!account) {\n    throw new Error(\"Wallet not connected.\");\n  }\n\n  const rpcUrl = getRpcUrlForChain({ chain, client });\n  const viemChain: ViemChain = {\n    id: chain.id,\n    name: chain.name || \"\",\n    rpcUrls: {\n      default: { http: [rpcUrl] },\n    },\n    nativeCurrency: {\n      name: chain.nativeCurrency?.name || \"Ether\",\n      symbol: chain.nativeCurrency?.symbol || \"ETH\",\n      decimals: chain.nativeCurrency?.decimals || 18,\n    },\n  };\n\n  const rpcClient = getRpcClient({ client, chain });\n  const transport = custom({\n    request: async (request) => {\n      if (request.method === \"eth_sendTransaction\") {\n        const result = await sendTransaction({\n          transaction: prepareTransaction({\n            ...request.params[0],\n            chain,\n            client,\n          }),\n          account: account,\n        });\n        return result.transactionHash;\n      }\n      if (request.method === \"eth_estimateGas\") {\n        return estimateGas({\n          transaction: prepareTransaction({\n            ...request.params[0],\n            chain,\n            client,\n          }),\n          account: account,\n        });\n      }\n      if (request.method === \"personal_sign\") {\n        return account.signMessage({\n          message: {\n            raw: request.params[0],\n          },\n        });\n      }\n      if (request.method === \"eth_signTypedData_v4\") {\n        const data = JSON.parse(request.params[1]);\n        return account.signTypedData(data);\n      }\n      if (request.method === \"eth_accounts\") {\n        return [account.address];\n      }\n      if (\n        request.method === \"wallet_switchEthereumChain\" ||\n        request.method === \"wallet_addEthereumChain\"\n      ) {\n        throw new Error(\n          \"Can't switch chains because only an account was passed to 'viemAdapter.walletClient.toViem()', please pass a connected wallet instance instead.\",\n        );\n      }\n      return rpcClient(request);\n    },\n  });\n\n  return createWalletClient({\n    transport,\n    account: getAddress(account.address),\n    chain: viemChain,\n    key: \"thirdweb-wallet\",\n  });\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useAutoConnect"
    },
    "content": "/**\n * Autoconnect the last previously connected wallet.\n *\n * @example\n * ```tsx\n * import { useAutoConnect } from \"thirdweb/react\";\n *\n * const { data: autoConnected, isLoading } = useAutoConnect({\n *  client,\n *  accountAbstraction,\n *  wallets,\n *  onConnect,\n *  timeout,\n * });\n * ```\n * @walletConnection\n * @param props - The props for auto connect.\n * @returns whether the auto connect was successful.\n */\nexport function useAutoConnect(props: AutoConnectProps) {\n  const wallets = props.wallets || getDefaultWallets(props);\n\n  return useAutoConnectCore(\n    webLocalStorage,\n    {\n      ...props,\n      wallets,\n    },\n    createWallet,\n    () => {\n      const specifiedWalletIds = new Set(wallets.map((x) => x.id));\n\n      // pass the wallets that are not already specified but are installed by the user\n      const installedWallets = getInstalledWalletProviders()\n        .filter((x) => !specifiedWalletIds.has(x.info.rdns))\n        .map((x) => createWallet(x.info.rdns));\n\n      return installedWallets;\n    },\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useConnectedWallets"
    },
    "content": "/**\n * A hook that returns all connected wallets\n * @returns An array of all connected wallets\n * @example\n * ```jsx\n * import { useConnectedWallets } from \"thirdweb/react\";\n *\n * const wallets = useConnectedWallets();\n * ```\n * @walletConnection\n */\nexport function useConnectedWallets() {\n  const manager = useConnectionManagerCtx(\"useConnectedWallets\");\n  const store = manager.connectedWallets;\n  return useSyncExternalStore(store.subscribe, store.getValue, store.getValue);\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useAddConnectedWallet"
    },
    "content": "/**\n * A hook to add a connected wallet without setting the active wallet.\n * @returns A function that lets you add a connected wallet.\n * @example\n * ```jsx\n * import { useAddConnectedWallet } from \"thirdweb/react\";\n *\n * const addConnectedWallet = useAddConnectedWallet();\n *\n * // later in your code\n * await addConnectedWallet(wallet);\n * ```\n * @walletConnection\n */\nexport function useAddConnectedWallet() {\n  const manager = useConnectionManagerCtx(\"useAddConnectedWallet\");\n  return manager.addConnectedWallet;\n}"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "PayEmbedConnectOptions"
    },
    "content": "/**\n * Connection options for the `PayEmbed` component\n *\n * @example\n * ```tsx\n * <PayEmbed client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\nexport type PayEmbedConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "createWalletConnectSession"
    },
    "content": "/**\n * Initiates a new WalletConnect session for interacting with another application.\n * @param options - The options to use to create the WalletConnect session.\n * @example\n * ```ts\n * import { createWalletConnectClient, createWalletConnectSession } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n *\n * const session = createWalletConnectSession({\n *   walletConnectClient: client,\n *   uri: \"wc:...\",\n * });\n * ```\n * @wallet\n */\nexport function createWalletConnectSession(\n  options: CreateWalletConnectSessionOptions,\n) {\n  const { uri, walletConnectClient } = options;\n\n  walletConnectClient.core.pairing.pair({ uri });\n}"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "UseWalletDetailsModalOptions"
    },
    "content": "export type UseWalletDetailsModalOptions = {\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * Set the theme for the Wallet Details Modal. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n  /**\n   * Customize the tokens shown in the \"Send Funds\" screen in Details Modal for various networks.\n   *\n   * By default, The \"Send Funds\" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.\n   * @example\n   *\n   * supportedTokens prop allows you to customize this list as shown below which shows  \"Dai Stablecoin\" when users wallet is connected to the \"Base\" mainnet.\n   *\n   * ```tsx\n   * import { useWalletDetailsModal } from 'thirdweb/react';\n   *\n   * function Example() {\n   *   const detailsModal = useWalletDetailsModal();\n   *\n   *   function handleClick() {\n   *      detailsModal.open({\n   *        client,\n   *        supportedTokens:{\n   * \t\t\t\t  84532: [\n   * \t\t\t\t\t  {\n   * \t\t\t\t\t\t  address: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb', // token contract address\n   * \t\t\t\t\t\t  name: 'Dai Stablecoin',\n   * \t\t\t\t\t\t  symbol: 'DAI',\n   * \t\t\t\t\t\t  icon: 'https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508',\n   * \t\t\t\t\t  },\n   * \t\t\t\t  ],\n   * \t\t\t  }\n   *      });\n   *   }\n   *\n   *   return (\n   * \t\t<button onClick={handleClick}> show wallet details </button>\n   * \t);\n   * }\n   * ```\n   */\n  supportedTokens?: SupportedTokens;\n  /**\n   * Customize the NFTs shown in the \"View Funds\" screen in Details Modal for various networks.\n   *\n   * By default, The \"View Funds\" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.\n   * @example\n   *\n   * supportedTokens prop allows you to customize this list as shown below which shows \"Pudgy Penguins\" when a users wallet is connected to Ethereum mainnet.\n   *\n   * ```tsx\n   * import { ConnectButton } from 'thirdweb/react';\n   *\n   * function Example() {\n   *   return (\n   * \t\t<ConnectButton\n   * \t\t\tsupportedNFTs={{\n   *        // when connected to Ethereum mainnet - show Pudgy Penguins\n   * \t\t\t\t1: [\n   * \t\t\t\t\t'0xBd3531dA5CF5857e7CfAA92426877b022e612cf8',\n   * \t\t\t\t],\n   * \t\t\t}}\n   * \t\t/>\n   * \t);\n   * }\n   * ```\n   */\n  supportedNFTs?: SupportedNFTs;\n  /**\n   * By default - Details Modal UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the Details Modal UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Array of chains that your app supports. They will be displayed in the network selector in the screen.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Show a \"Request Testnet funds\" link in Wallet Details Modal when user is connected to a testnet.\n   *\n   * By default it is `false`, If you want to show the \"Request Testnet funds\" link when user is connected to a testnet, set this prop to `true`\n   */\n  showTestnetFaucet?: boolean;\n\n  /**\n   * customize the Network selector shown in the Wallet Details Modal\n   */\n  networkSelector?: NetworkSelectorProps;\n\n  /**\n   * Hide the \"Disconnect Wallet\" button in the Wallet Details Modal.\n   *\n   * By default it is `false`\n   */\n  hideDisconnect?: boolean;\n\n  /**\n   * Hide the \"Switch Wallet\" button in the Wallet Details Modal.\n   *\n   * By default it is `false`\n   */\n  hideSwitchWallet?: boolean;\n\n  /**\n   * Callback to be called when a wallet is disconnected by clicking the \"Disconnect Wallet\" button in the Wallet Details Modal.\n   *\n   * ```tsx\n   * import { useWalletDetailsModal } from 'thirdweb/react';\n   *\n   * function Example() {\n   *   const detailsModal = useWalletDetailsModal();\n   *\n   *   function handleClick() {\n   *      detailsModal.open({\n   *        client,\n   *        onDisconnect: ({ wallet, account }) => {\n   *           console.log('disconnected', wallet, account);\n   *        }\n   *      });\n   *   }\n   *\n   *   return (\n   * \t\t<button onClick={handleClick}> wallet details </button>\n   * \t);\n   * }\n   * ```\n   */\n  onDisconnect?: (info: {\n    wallet: Wallet;\n    account: Account;\n  }) => void;\n\n  /**\n   * Render custom UI at the bottom of the Details Modal\n   */\n  footer?: (props: { close: () => void }) => JSX.Element;\n\n  /**\n   * Configure options for thirdweb Pay.\n   *\n   * thirdweb Pay allows users to buy tokens using crypto or fiat currency.\n   */\n  payOptions?: Extract<PayUIOptions, { mode?: \"fund_wallet\" }>;\n\n  /**\n   * Display the balance of a token instead of the native token\n   * @example\n   * ```tsx\n   * const displayBalanceToken = {\n   *   // show USDC balance when connected to Ethereum mainnet or Polygon\n   *   [ethereum.id]: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n   *   [polygon.id]: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\",\n   * }\n   * ```\n   */\n  displayBalanceToken?: Record<number, string>;\n\n  /**\n   * Options to configure the Connect UI shown when user clicks the \"Connect Wallet\" button in the Wallet Switcher screen.\n   */\n  connectOptions?: DetailsModalConnectOptions;\n\n  /**\n   * Render custom UI for the connected wallet name in the `ConnectButton` Details Modal, overriding ENS name or wallet address.\n   */\n  connectedAccountName?: React.ReactNode;\n\n  /**\n   * Use custom avatar URL for the connected wallet image in the `ConnectButton` Details Modal, overriding ENS avatar or Blobbie icon.\n   */\n  connectedAccountAvatarUrl?: string;\n\n  /**\n   * Hide the \"Send Funds\" button in the Details Modal.\n   *\n   * By default the \"Send Funds\" button is shown.\n   */\n  hideSendFunds?: boolean;\n\n  /**\n   * Hide the \"Receive Funds\" button in the Details Modal.\n   *\n   * By default the \"Receive Funds\" button is shown.\n   */\n  hideReceiveFunds?: boolean;\n\n  /**\n   * Hide the \"Buy Funds\" button in the Details Modal.\n   *\n   * By default the \"Buy Funds\" button is shown.\n   */\n  hideBuyFunds?: boolean;\n\n  /**\n   * When you click on \"View Assets\", by default the \"Tokens\" tab is shown first.\n   * If you want to show the \"NFTs\" tab first, change the order of the asset tabs to: [\"nft\", \"token\"]\n   * Note: If an empty array is passed, the [View Funds] button will be hidden\n   */\n  assetTabs?: AssetTabs[];\n\n  /**\n   * Show the token balance's value in fiat.\n   * Note: Not all tokens are resolvable to a fiat value. In that case, nothing will be shown.\n   */\n  showBalanceInFiat?: SupportedFiatCurrency;\n\n  /**\n   * The callback function for when the modal is closed\n   * @param screen The name of the screen that was being shown when user closed the modal\n   */\n  onClose?: (screen: string) => void;\n};"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "WalletSelectorProps"
    },
    "content": "type WalletSelectorProps = {\n  wallets: Wallet[];\n  selectWallet: (wallet: Wallet) => void;\n  title: string;\n  done: (wallet: Wallet) => void;\n  goBack?: () => void;\n  onShowAll: () => void;\n  setModalVisibility: (value: boolean) => void;\n  accountAbstraction?: SmartWalletOptions;\n  size: \"compact\" | \"wide\";\n  meta: {\n    title?: string;\n    titleIconUrl?: string;\n    showThirdwebBranding?: boolean;\n    termsOfServiceUrl?: string;\n    privacyPolicyUrl?: string;\n    requireApproval?: boolean;\n  };\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  recommendedWallets: Wallet[] | undefined;\n  hideHeader: boolean;\n  chain: Chain | undefined;\n  chains: Chain[] | undefined;\n  showAllWallets: boolean | undefined;\n  walletConnect:\n    | {\n        projectId?: string;\n      }\n    | undefined;\n  modalHeader:\n    | {\n        title: string;\n        onBack: () => void;\n      }\n    | undefined;\n  walletIdsToHide: WalletId[] | undefined;\n  disableSelectionDataReset?: boolean;\n};"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "WalletSwitcherConnectionScreenProps"
    },
    "content": "export type WalletSwitcherConnectionScreenProps = {\n  chain: Chain | undefined;\n  chains: Chain[] | undefined;\n  client: ThirdwebClient;\n  wallets: Wallet[] | undefined;\n  appMetadata: AppMetadata | undefined;\n  connectLocale: ConnectLocale;\n  isEmbed: boolean;\n  accountAbstraction: SmartWalletOptions | undefined;\n  onSelect: (wallet: Wallet) => void;\n  recommendedWallets: Wallet[] | undefined;\n  showAllWallets: boolean;\n  hiddenWallets?: WalletId[];\n  walletConnect:\n    | {\n        projectId?: string;\n      }\n    | undefined;\n  onBack: () => void;\n};"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "ExternalWalletRow"
    },
    "content": "function ExternalWalletRow(props: {\n  theme: Theme;\n  wallet: Wallet;\n  connectWallet: (wallet: Wallet) => void;\n}) {\n  const { wallet, theme, connectWallet } = props;\n  const imageQuery = useWalletImage(wallet.id);\n  const infoQuery = useWalletInfo(wallet.id);\n  return (\n    <TouchableOpacity style={styles.row} onPress={() => connectWallet(wallet)}>\n      {imageQuery.data ? (\n        <Image\n          source={{ uri: imageQuery.data ?? \"\" }}\n          style={{ width: 52, height: 52, borderRadius: 6 }}\n        />\n      ) : (\n        <Skeleton\n          theme={theme}\n          style={{\n            width: 52,\n            height: 52,\n          }}\n        />\n      )}\n      <ThemedText theme={theme} type=\"subtitle\">\n        {infoQuery.data?.name || \"\"}\n      </ThemedText>\n    </TouchableOpacity>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "AutoConnect"
    },
    "content": "/**\n * AutoConnect last connected wallet on page reload or revisit.\n * Note: If you are using `ConnectButton` or `ConnectEmbed` components, You don't need to use this component as it is already included.\n *\n * This is useful if you are manually connecting the wallets using the [`useConnect`](https://portal.thirdweb.com/references/typescript/v5/useConnect) hook and want to auto connect the last connected wallets on page reload or revisit.\n * @param props - Object of type `AutoConnectProps`. Refer to [`AutoConnectProps`](https://portal.thirdweb.com/references/typescript/v5/AutoConnectProps)\n * @example\n * ```tsx\n * import { AutoConnect } from \"thirdweb/react\";\n * import { createWallet, inAppWallet } from \"thirdweb/wallets\";\n *\n *\n * // list of wallets that your app uses\n * const wallets = [\n *  inAppWallet(),\n *  createWallet('io.metamask'),\n *  createWallet(\"me.rainbow\"),\n * ]\n *\n * function Example() {\n *  return (\n *    <AutoConnect\n *      wallets={wallets}\n *      client={client}\n *      appMetadata={appMetadata}\n *    />\n *  );\n * }\n * ```\n * @component\n * @walletConnection\n */\nexport function AutoConnect(props: AutoConnectProps) {\n  useAutoConnect(props);\n  return <></>;\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "TransactionModeScreen"
    },
    "content": "export function TransactionModeScreen(props: {\n  client: ThirdwebClient;\n  payUiOptions: Extract<PayUIOptions, { mode: \"transaction\" }>;\n  supportedDestinations: SupportedChainAndTokens;\n  payerAccount: Account | undefined;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  onContinue: (\n    tokenAmount: string,\n    toChain: Chain,\n    toToken: ERC20OrNativeToken,\n  ) => void;\n}) {\n  const {\n    payUiOptions,\n    client,\n    payerAccount,\n    supportedDestinations,\n    onContinue,\n  } = props;\n  const {\n    data: chainData,\n    error: chainDataError,\n    isLoading: chainDataLoading,\n    refetch: chainDataRefetch,\n  } = useChainMetadata(payUiOptions.transaction.chain);\n  const metadata = payUiOptions.metadata;\n  const {\n    data: transactionCostAndData,\n    error: transactionCostAndDataError,\n    isLoading: transactionCostAndDataLoading,\n    refetch: transactionCostAndDataRefetch,\n  } = useTransactionCostAndData({\n    transaction: payUiOptions.transaction,\n    account: payerAccount,\n    supportedDestinations,\n  });\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const sponsoredTransactionsEnabled =\n    hasSponsoredTransactionsEnabled(activeWallet);\n  const balanceQuery = useWalletBalance(\n    {\n      address: activeAccount?.address,\n      chain: payUiOptions.transaction.chain,\n      tokenAddress: isNativeToken(transactionCostAndData?.token || NATIVE_TOKEN)\n        ? undefined\n        : transactionCostAndData?.token.address,\n      client: props.client,\n    },\n    {\n      enabled: !!transactionCostAndData,\n    },\n  );\n\n  if (transactionCostAndDataLoading || chainDataLoading) {\n    return <LoadingScreen />;\n  }\n\n  if (!activeAccount) {\n    return (\n      <Container\n        style={{\n          minHeight: \"350px\",\n        }}\n        fullHeight\n        flex=\"row\"\n        center=\"both\"\n      >\n        <Container animate=\"fadein\">\n          <Spacer y=\"xxl\" />\n          <Container flex=\"row\" center=\"x\">\n            <OutlineWalletIcon size={iconSize[\"3xl\"]} />\n          </Container>\n          <Spacer y=\"lg\" />\n          <Text center color=\"primaryText\" size=\"md\">\n            Please connect a wallet to continue\n          </Text>\n          <Spacer y=\"xl\" />\n          <Container flex=\"row\" center=\"x\" style={{ width: \"100%\" }}>\n            <ConnectButton\n              client={client}\n              theme={theme}\n              {...props.connectOptions}\n            />\n          </Container>\n        </Container>\n      </Container>\n    );\n  }\n\n  if (transactionCostAndDataError || chainDataError) {\n    return (\n      <Container\n        style={{\n          minHeight: \"350px\",\n        }}\n        fullHeight\n        flex=\"row\"\n        center=\"both\"\n      >\n        <ErrorState\n          title={\n            transactionCostAndDataError?.message ||\n            chainDataError?.message ||\n            \"Something went wrong\"\n          }\n          onTryAgain={\n            transactionCostAndDataError\n              ? transactionCostAndDataRefetch\n              : chainDataRefetch\n          }\n        />\n      </Container>\n    );\n  }\n\n  if (!transactionCostAndData || !chainData) {\n    return <LoadingScreen />;\n  }\n\n  const insufficientFunds =\n    balanceQuery.data &&\n    balanceQuery.data.value < transactionCostAndData.transactionValueWei;\n\n  return (\n    <Container px=\"lg\">\n      <Spacer y=\"lg\" />\n      <ModalHeader title={metadata?.name || \"Transaction\"} />\n\n      <Spacer y=\"lg\" />\n      <Container>\n        {metadata?.image ? (\n          <Img\n            client={client}\n            src={metadata?.image}\n            style={{\n              width: \"100%\",\n              borderRadius: spacing.md,\n              border: `1px solid ${theme.colors.borderColor}`,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          />\n        ) : activeAccount ? (\n          <Container flex=\"column\" gap=\"sm\">\n            {insufficientFunds && (\n              <div>\n                <Text color=\"danger\" size=\"xs\" center multiline>\n                  Insufficient Funds\n                </Text>\n                <Text size=\"xs\" center multiline>\n                  Select another token or pay with a debit card.\n                </Text>\n              </div>\n            )}\n            <Container\n              flex=\"row\"\n              style={{\n                justifyContent: \"space-between\",\n                padding: spacing.sm,\n                marginBottom: spacing.sm,\n                borderRadius: spacing.md,\n                backgroundColor: theme.colors.tertiaryBg,\n                border: `1px solid ${theme.colors.borderColor}`,\n              }}\n            >\n              <WalletRow\n                address={activeAccount?.address}\n                iconSize=\"md\"\n                client={client}\n              />\n              {balanceQuery.data ? (\n                <Container flex=\"row\" gap=\"3xs\" center=\"y\">\n                  <Text size=\"xs\" color=\"secondaryText\" weight={500}>\n                    {formatTokenBalance(balanceQuery.data, false)}\n                  </Text>\n                  <TokenSymbol\n                    token={transactionCostAndData.token}\n                    chain={payUiOptions.transaction.chain}\n                    size=\"xs\"\n                    color=\"secondaryText\"\n                  />\n                </Container>\n              ) : (\n                <Skeleton width=\"70px\" height={fontSize.xs} />\n              )}\n            </Container>\n          </Container>\n        ) : null}\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"md\" color=\"primaryText\" weight={700}>\n              Price\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <TokenIcon\n                chain={payUiOptions.transaction.chain}\n                client={props.client}\n                size=\"sm\"\n                token={transactionCostAndData.token}\n              />\n              <Text color=\"primaryText\" size=\"md\" weight={700}>\n                {String(\n                  formatNumber(\n                    Number(\n                      toTokens(\n                        transactionCostAndData.transactionValueWei,\n                        transactionCostAndData.decimals,\n                      ),\n                    ),\n                    6,\n                  ),\n                )}{\" \"}\n                {transactionCostAndData.token.symbol}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Gas Fees\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <Text\n                color={sponsoredTransactionsEnabled ? \"success\" : \"primaryText\"}\n                size=\"xs\"\n              >\n                {sponsoredTransactionsEnabled\n                  ? \"Sponsored\"\n                  : `${String(\n                      formatNumber(\n                        Number(\n                          toTokens(\n                            transactionCostAndData.gasCostWei,\n                            chainData.nativeCurrency.decimals,\n                          ),\n                        ),\n                        6,\n                      ),\n                    )} ${chainData.nativeCurrency.symbol}`}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"sm\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Network\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <ChainIcon\n                chainIconUrl={chainData.icon?.url}\n                size=\"xs\"\n                client={props.client}\n              />\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {chainData.name}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n      </Container>\n      <Spacer y=\"xl\" />\n      {payerAccount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            let totalCostWei = insufficientFunds\n              ? transactionCostAndData.transactionValueWei -\n                (balanceQuery.data?.value || 0n)\n              : transactionCostAndData.transactionValueWei;\n            if (\n              transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS &&\n              !sponsoredTransactionsEnabled\n            ) {\n              totalCostWei += transactionCostAndData.gasCostWei;\n            }\n            trackPayEvent({\n              event: \"choose_payment_method_transaction_mode\",\n              client,\n              walletAddress: payerAccount.address,\n              walletType: activeWallet?.id,\n            });\n            onContinue(\n              toTokens(totalCostWei, transactionCostAndData.decimals),\n              payUiOptions.transaction.chain,\n              transactionCostAndData.token,\n            );\n          }}\n        >\n          Choose Payment Method\n        </Button>\n      ) : (\n        <div>\n          <ConnectButton\n            {...props.connectOptions}\n            client={client}\n            theme={theme}\n            connectButton={{\n              style: {\n                width: \"100%\",\n              },\n            }}\n          />\n        </div>\n      )}\n      <Spacer y=\"lg\" />\n      {payUiOptions.showThirdwebBranding !== false && (\n        <>\n          <PoweredByThirdweb link=\"https://playground.thirdweb.com/connect/pay?utm_source=ub_text\" />\n          <Spacer y=\"sm\" />\n        </>\n      )}\n    </Container>\n  );\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "const EcosystemWalletConnectUI = /* @__PURE__ */ lazy(\n  () => import(\"../../../wallets/ecosystem/EcosystemWalletConnectUI.js\"),\n);"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "autoConnect"
    },
    "content": "/**\n * Attempts to automatically connect to the last connected wallet.\n * It combines both specified wallets and installed wallet providers that aren't already specified.\n *\n * @example\n *\n * ```tsx\n * import { autoConnect } from \"thirdweb/wallets\";\n *\n * const autoConnected = await autoConnect({\n *  client,\n *  onConnect: (wallet) => {\n *    console.log(\"wallet\", wallet);\n *  },\n * });\n * ```\n *\n * @param props - The auto-connect configuration properties\n * @param props.wallets - Array of wallet instances to consider for auto-connection\n * @returns {boolean} a promise resolving to true or false depending on whether the auto connect function connected to a wallet or not\n * @walletConnection\n */\nexport async function autoConnect(\n  props: AutoConnectProps & {\n    wallets?: Wallet[];\n  },\n): Promise<boolean> {\n  const wallets = props.wallets || getDefaultWallets(props);\n  const manager = createConnectionManager(webLocalStorage);\n  const result = await autoConnectCore({\n    storage: webLocalStorage,\n    props: {\n      ...props,\n      wallets,\n    },\n    createWalletFn: createWallet,\n    getInstalledWallets: () => {\n      const specifiedWalletIds = new Set(wallets.map((x) => x.id));\n\n      // pass the wallets that are not already specified but are installed by the user\n      const installedWallets = getInstalledWalletProviders()\n        .filter((x) => !specifiedWalletIds.has(x.info.rdns))\n        .map((x) => createWallet(x.info.rdns));\n\n      return installedWallets;\n    },\n    manager,\n  });\n  return result;\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "ConnectEmbed"
    },
    "content": "/**\n * A component that allows the user to connect their wallet.\n *\n * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.\n *\n * It only renders UI if wallet is not connected\n * @example\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n * />\n * ```\n * @param props -\n * The props for the `ConnectEmbed` component.\n *\n * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details\n * @component\n * @walletConnection\n */\nexport function ConnectEmbed(props: ConnectEmbedProps) {\n  const theme = parseTheme(props.theme);\n  const wallet = useActiveWallet();\n  const account = useActiveAccount();\n  const siweAuth = useSiweAuth(wallet, account, props.auth);\n  const needsAuth = siweAuth.requiresAuth && !siweAuth.isLoggedIn;\n  const isConnected = wallet && !needsAuth;\n  const adaptedProps = {\n    ...props,\n    connectModal: { ...props },\n  } as ConnectButtonProps;\n  return isConnected ? null : (\n    <ConnectModal\n      {...adaptedProps}\n      theme={theme}\n      containerType=\"embed\"\n      siweAuth={siweAuth}\n    />\n  );\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "export const wallet = {\n  id: \"smart\",\n  name: \"SmartWallet\",\n  homepage: \"https://thirdweb.com\",\n  app: {\n    browser: null,\n    ios: null,\n    android: null,\n    mac: null,\n    windows: null,\n    linux: null,\n    chrome: null,\n    firefox: null,\n    safari: null,\n    edge: null,\n    opera: null,\n  },\n  rdns: null,\n  mobile: {\n    native: null,\n    universal: null,\n  },\n  desktop: {\n    native: null,\n    universal: null,\n  },\n} as const;"
  },
  {
    "metadata": {
      "type": "interface",
      "functionOrClassName": "AccountBalanceProps"
    },
    "content": "/**\n * Props for the AccountBalance component\n * @component\n * @wallet\n */\nexport interface AccountBalanceProps extends Omit<TextProps, \"children\"> {\n  /**\n   * The network to fetch balance on\n   * If not passed, the component will use the current chain that the wallet is connected to (`useActiveWalletChain()`)\n   */\n  chain?: Chain;\n  /**\n   * By default this component will fetch the balance for the native token on a given chain\n   * If you want to fetch balance for an ERC20 token, use the `tokenAddress` props\n   */\n  tokenAddress?: string;\n  /**\n   * A function to format the balance's display value\n   * use this function to transform the balance display value like round up the number\n   * Particularly useful to avoid overflowing-UI issues\n   */\n  formatFn?: (props: AccountBalanceInfo) => string;\n  /**\n   * This component will be shown while the balance of the account is being fetched\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a loading sign or spinner to this prop.\n   * @example\n   * ```tsx\n   * <AccountBalance\n   *   chain={ethereum}\n   *   loadingComponent={<Spinner />}\n   * />\n   * ```\n   */\n  loadingComponent?: React.ComponentType;\n  /**\n   * This component will be shown if the balance fails to be retreived\n   * If not passed, the component will return `null`.\n   *\n   * You can/should pass a descriptive text/component to this prop, indicating that the\n   * balance was not fetched succesfully\n   * @example\n   * ```tsx\n   * <AccountBalance\n   *   chain={nonExistentChain}\n   *   fallbackComponent={\"Failed to load\"}\n   * />\n   * ```\n   */\n  fallbackComponent?: React.ComponentType;\n  /**\n   * Optional `useQuery` params\n   */\n  queryOptions?: Omit<\n    UseQueryOptions<AccountBalanceInfo>,\n    \"queryFn\" | \"queryKey\"\n  >;\n\n  /**\n   * Show the token balance in a supported fiat currency (e.g \"USD\")\n   */\n  showBalanceInFiat?: SupportedFiatCurrency;\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "WalletManagerScreen"
    },
    "content": "export function WalletManagerScreen(\n  props: Omit<\n    WalletSwitcherConnectionScreenProps,\n    \"onSelect\" | \"isEmbed\" | \"selectedWallet\"\n  > & {\n    activeAccount: Account;\n    activeWallet: Wallet;\n    activeChain: Chain;\n  },\n) {\n  const [screen, setScreen] = useState<\"wallets\" | \"connect\">(\"wallets\");\n  const connectedWallets = useConnectedWallets();\n  const setActive = useSetActiveWallet();\n\n  // if all wallets are connected and showAll wallets is disabled, hide the connect button\n  const hideConnectButton =\n    !props.showAllWallets &&\n    props.wallets?.every((w) => connectedWallets.includes(w));\n\n  if (screen === \"connect\") {\n    return (\n      <WalletSwitcherConnectionScreen\n        {...props}\n        isEmbed={false}\n        onSelect={(w) => {\n          setActive(w);\n          props.onBack();\n        }}\n      />\n    );\n  }\n\n  return (\n    <Container>\n      <Container p=\"lg\">\n        <ModalHeader title=\"Wallets\" onBack={props.onBack} />\n      </Container>\n\n      <Line />\n      <Spacer y=\"md\" />\n\n      <Container\n        px=\"md\"\n        style={{\n          minHeight: \"150px\",\n        }}\n      >\n        <Container flex=\"column\" gap=\"xs\">\n          {connectedWallets\n            .filter((w) => !props.hiddenWallets?.includes(w.id))\n            .map((w) => {\n              return (\n                <WalletManangerButton\n                  key={w.id}\n                  client={props.client}\n                  // address={address || \"\"}\n                  onClick={() => {\n                    setActive(w);\n                    props.onBack();\n                  }}\n                  chain={props.activeChain}\n                  wallet={w}\n                />\n              );\n            })}\n        </Container>\n      </Container>\n\n      <Spacer y=\"xxl\" />\n\n      <Container p=\"lg\">\n        {!hideConnectButton && (\n          <Button\n            variant=\"accent\"\n            fullWidth\n            onClick={() => {\n              setScreen(\"connect\");\n            }}\n            gap=\"xs\"\n          >\n            <PlusIcon width={iconSize.sm} height={iconSize.sm} />\n            Connect Wallet\n          </Button>\n        )}\n      </Container>\n    </Container>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "SmartWalletConnecting"
    },
    "content": "function SmartWalletConnecting(props: {\n  done: (smartWallet: Wallet) => void;\n  personalWallet: Wallet;\n  accountAbstraction: SmartWalletOptions;\n  onBack?: () => void;\n  personalWalletInfo: WalletInfo;\n  localeId: LocaleId;\n  size: \"compact\" | \"wide\";\n  client: ThirdwebClient;\n}) {\n  const localeQuery = useQuery<SmartWalletLocale>({\n    queryKey: [\"getSmartWalletLocale\", props.localeId],\n    queryFn: () => getSmartWalletLocale(props.localeId),\n  });\n  const { personalWallet } = props;\n  const { done } = props;\n\n  const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] =\n    useState<\"connecting\" | \"connect-error\" | \"idle\">(\"idle\");\n  const connectionManager = useConnectionManager();\n\n  const handleConnect = useCallback(async () => {\n    if (!personalWallet) {\n      throw new Error(\"No personal wallet\");\n    }\n\n    setSmartWalletConnectionStatus(\"connecting\");\n\n    try {\n      const connected = await connectionManager.handleConnection(\n        personalWallet,\n        {\n          accountAbstraction: props.accountAbstraction,\n          client: props.client,\n        },\n      );\n      done(connected);\n      setSmartWalletConnectionStatus(\"idle\");\n    } catch (e) {\n      console.error(e);\n      setSmartWalletConnectionStatus(\"connect-error\");\n    }\n  }, [\n    done,\n    personalWallet,\n    props.client,\n    props.accountAbstraction,\n    connectionManager,\n  ]);\n\n  const connectStarted = useRef(false);\n  useEffect(() => {\n    if (!connectStarted.current) {\n      handleConnect();\n      connectStarted.current = true;\n    }\n  }, [handleConnect]);\n\n  if (!localeQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  if (smartWalletConnectionStatus === \"connect-error\") {\n    return (\n      <Container\n        fullHeight\n        animate=\"fadein\"\n        flex=\"column\"\n        center=\"both\"\n        p=\"lg\"\n        style={{\n          minHeight: \"300px\",\n        }}\n      >\n        <Text color=\"danger\">{localeQuery.data.failedToConnect}</Text>\n      </Container>\n    );\n  }\n\n  return (\n    <Container\n      fullHeight\n      flex=\"column\"\n      center=\"both\"\n      style={{\n        minHeight: \"300px\",\n      }}\n    >\n      <Text color=\"primaryText\" multiline center>\n        {localeQuery.data.connecting}\n      </Text>\n      <Spacer y=\"lg\" />\n      <Spinner color=\"accentText\" size=\"lg\" />\n    </Container>\n  );\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "/**\n * A component that allows the user to connect their wallet.\n *\n * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.\n *\n * It only renders UI if wallet is not connected\n * @example\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n * />\n * ```\n * @param props -\n * The props for the `ConnectEmbed` component.\n *\n * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details\n * @component\n * @walletConnection\n */\nconst styles = StyleSheet.create({\n  modalContainer: {\n    flex: 1,\n    width: \"100%\",\n    flexDirection: \"column\",\n    borderTopLeftRadius: radius.lg,\n    borderTopRightRadius: radius.lg,\n  },\n  embedContainer: {\n    flex: 1,\n    width: \"100%\",\n    flexDirection: \"column\",\n    backgroundColor: \"transparent\",\n  },\n});"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "ConnectButtonProps"
    },
    "content": "/**\n * Props for the [`ConnectButton`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton) component\n * @connectWallet\n */\nexport type ConnectButtonProps = {\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n\n  /**\n   * Array of supported wallets. If not provided, default wallets will be used.\n   * @example\n   * ```tsx\n   * import { AutoConnect } from \"thirdweb/react\";\n   * import { createWallet, inAppWallet } from \"thirdweb/wallets\";\n   *\n   * const wallets = [\n   *   inAppWallet(),\n   *   createWallet(\"io.metamask\"),\n   *   createWallet(\"com.coinbase.wallet\"),\n   *   createWallet(\"me.rainbow\"),\n   * ];\n   *\n   * function Example() {\n   *  return (\n   *    <ConnectButton\n   *      client={client}\n   *      wallets={wallets}\n   *    />\n   *  )\n   * }\n   * ```\n   *\n   * If no wallets are specified. The component will show All the EIP-6963 compliant installed wallet extensions, as well as below default wallets:\n   *\n   * ```tsx\n   * const defaultWallets = [\n   *  inAppWallet(),\n   *  createWallet(\"io.metamask\"),\n   *  createWallet(\"com.coinbase.wallet\"),\n   *  createWallet(\"me.rainbow\"),\n   *  createWallet(\"io.zerion.wallet\"),\n   * ]\n   * ```\n   *\n   * The `ConnectButton` also shows a \"All wallets\" button at the end of wallet list which allows user to connect to any of the 500+ wallets\n   */\n  wallets?: Wallet[];\n\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```tsx\n   * <ConnectButton client={client} autoConnect={{ timeout: 10000 }} />\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   *\n   * Some wallets display this information to the user when they connect to your app.\n   * @example\n   * ```ts\n   * {\n   *   name: \"My App\",\n   *   url: \"https://my-app.com\",\n   *   description: \"some description about your app\",\n   *   logoUrl: \"https://path/to/my-app/logo.svg\",\n   * };\n   * ```\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * @example\n   * ```tsx\n   * import { polygon } from \"thirdweb/chains\";\n   *\n   * function Example() {\n   *  return <div> <ConnectButton chain={polygon} /> </div>\n   * }\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * ```tsx\n   * <ConnectButton chains={[ethereum, polygon, optimism]} />\n   * ```\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/chains\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Set the theme for the `ConnectButton` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <ConnectButton theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"dark\" | \"light\" | Theme;\n\n  /**\n   * Configurations for the button element that is shown when wallet is not connected\n   * @example\n   * ```tsx\n   * <ConnectButton\n   *   connectButton={{\n   *       label: \"Connect\",\n   *       className: \"my-custom-class\",\n   *       style: {\n   *         borderRadius: \"10px\",\n   *       },\n   *   }}\n   * />;\n   * ```\n   */\n  connectButton?: ConnectButton_connectButtonOptions;\n\n  /**\n   * Configuration for the \"Switch Network\" button.\n   * This button is rendered when the wallet is connected, but it is not connected to the `chain` prop provided in `ConnectButton` component\n   * @example\n   * ```tsx\n   * <ConnectButton\n   *   switchButton={{\n   *     label: \"Wrong Network\",\n   *     className: \"my-custom-class\",\n   *     style: {\n   *       backgroundColor: \"red\",\n   *     },\n   *   }}\n   * />;\n   * ```\n   */\n  switchButton?: {\n    /**\n     * Set a custom label for the \"Switch Network\" button\n     */\n    label?: string;\n\n    /**\n     * CSS styles to apply to the switch button element\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * CSS class to apply to the switch button element\n     */\n    className?: string;\n  };\n\n  signInButton?: {\n    /**\n     * Set a custom label for the sign-in button\n     * @example\n     * ```tsx\n     * <ConnectButton\n     *   signInButton={{\n     *     label: \"Sign in now!\"\n     *   }}\n     * />\n     * ```\n     */\n    label?: string;\n\n    /**\n     * CSS styles to apply to the sign-in button element\n     * @example\n     * ```tsx\n     * <ConnectButton\n     *   signInButton={{\n     *     style: {\n     *       color: \"purple\",\n     *     }\n     *   }}\n     * />\n     * ```\n     */\n    style?: React.CSSProperties;\n\n    /**\n     * CSS class to apply to the sign-in button element\n     * @example\n     * ```tsx\n     * <ConnectButton\n     *   signInButton={{\n     *     className: \"my-class-name\"\n     *   }}\n     * />\n     * ```\n     */\n    className?: string;\n  };\n\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   * @example\n   * ```tsx\n   * <ConnectButton connectModal={{ size: \"compact\" }} />\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configurations for the Details Button that is shown when wallet is connected\n   * Refer to the [`ConnectButton_detailsButtonOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_detailsButtonOptions) type for more details\n   * @example\n   * ```tsx\n   * <ConnectButton\n   *   detailsButton={{\n   *     className: \"my-custom-class\",\n   *     style: { borderRadius: \"10px\" },\n   *   }}\n   * />;\n   * ```\n   */\n  detailsButton?: ConnectButton_detailsButtonOptions;\n\n  /**\n   * Configurations for the Details Modal that is shown when wallet is connected and user clicks on the details button to see the connected wallet details\n   * Refer to the [`ConnectButton_detailsModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_detailsModalOptions) type for more details\n   */\n  detailsModal?: ConnectButton_detailsModalOptions;\n\n  /**\n   * Customize the tokens shown in the \"Send Funds\" screen in Details Modal for various networks.\n   *\n   * By default, The \"Send Funds\" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.\n   * @example\n   *\n   * supportedTokens prop allows you to customize this list as shown below which shows  \"Dai Stablecoin\" when users wallet is connected to the \"Base\" mainnet.\n   *\n   * ```tsx\n   * import { ConnectButton } from 'thirdweb/react';\n   *\n   * function Example() {\n   *   return (\n   * \t\t<ConnectButton\n   * \t\t\tsupportedTokens={{\n   *        // when connected to \"Base\" mainnet - show balance of DAI stablecoin\n   * \t\t\t\t84532: [\n   * \t\t\t\t\t{\n   * \t\t\t\t\t\taddress: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb', // token contract address\n   * \t\t\t\t\t\tname: 'Dai Stablecoin',\n   * \t\t\t\t\t\tsymbol: 'DAI',\n   * \t\t\t\t\t\ticon: 'https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508',\n   * \t\t\t\t\t},\n   * \t\t\t\t],\n   * \t\t\t}}\n   * \t\t/>\n   * \t);\n   * }\n   * ```\n   */\n  supportedTokens?: SupportedTokens;\n\n  /**\n   * Customize the NFTs shown in the \"View Funds\" screen in Details Modal for various networks.\n   *\n   * By default, The \"View Funds\" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.\n   * @example\n   *\n   * supportedTokens prop allows you to customize this list as shown below which shows \"Pudgy Penguins\" help when users wallet is connected to Ethereum mainnet.\n   *\n   * ```tsx\n   * import { ConnectButton } from 'thirdweb/react';\n   *\n   * function Example() {\n   *   return (\n   * \t\t<ConnectButton\n   * \t\t\tsupportedNFTs={{\n   *        // when connected to Ethereum mainnet - show Pudgy Penguins\n   * \t\t\t\t1: ['0xBd3531dA5CF5857e7CfAA92426877b022e612cf8'],\n   * \t\t\t}}\n   * \t\t/>\n   * \t);\n   * }\n   * ```\n   */\n  supportedNFTs?: SupportedNFTs;\n\n  /**\n   * Called on connection of a wallet - including auto connect.\n   * The callback is called with the connected wallet as an argument.\n   *\n   * ```tsx\n   * <ConnectButton\n   *  onConnect={(wallet) => {\n   *    console.log(\"connected to\", wallet)\n   *  }}\n   * />\n   * ```\n   */\n  onConnect?: (wallet: Wallet) => void;\n\n  /**\n   * Called when the user disconnects the wallet by clicking on the \"Disconnect Wallet\" button in the `ConnectButton`'s Details Modal.\n   *\n   * ```tsx\n   * <ConnectButton\n   *  onDisconnect={({ wallet, account }) => {\n   *    console.log(\"disconnected\", wallet, account)\n   *  }}\n   * />\n   * ```\n   */\n  onDisconnect?: (info: { wallet: Wallet; account: Account }) => void;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   * ```tsx\n   * <ConnectButton\n   *   accountAbstraction={{\n   *    factoryAddress: \"0x123...\",\n   *    chain: sepolia,\n   *    gasless: true;\n   *   }}\n   * />\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 500+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "mintWithRole"
    },
    "content": "/**\n * Mints ERC20 tokens to a specified address via a MintableERC20 module.\n * @param options The options for minting tokens.\n * @returns A transaction to mint tokens.\n * @example\n * ```typescript\n * import { MintableERC20 } from \"thirdweb/modules\";\n *\n * const transaction = MintableERC20.mintWithRole({\n *   contract,\n *   to: \"0x...\", // Address to mint tokens to\n *   quantity: 2, // Amount of tokens to mint (in decimals)\n * });\n *\n * // Send the transaction\n * await sendTransaction({ transaction, account });\n * ```\n * @modules MintableERC20\n */\nexport function mintWithRole(options: BaseTransactionOptions<TokenMintParams>) {\n  return generatedMint({\n    contract: options.contract,\n    asyncParams: async () => {\n      let amount = 0n;\n\n      // if the quantity is already passed in wei, use it\n      if (\"quantityWei\" in options) {\n        amount = options.quantityWei;\n      } else if (\"quantity\" in options) {\n        // otherwise convert the quantity to wei using the contract's OWN decimals\n        const { convertErc20Amount } = await import(\n          \"../../../utils/extensions/convert-erc20-amount.js\"\n        );\n        amount = await convertErc20Amount({\n          amount: options.quantity,\n          client: options.contract.client,\n          chain: options.contract.chain,\n          erc20Address: options.contract.address,\n        });\n      }\n\n      return {\n        to: getAddress(options.to),\n        amount: BigInt(amount),\n        data: \"0x\",\n      };\n    },\n  });\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "ConnectModal"
    },
    "content": "export function ConnectModal(\n  props: ConnectButtonProps & {\n    theme: Theme;\n    onClose?: () => void;\n    containerType: ContainerType;\n    siweAuth: ReturnType<typeof useSiweAuth>;\n  },\n) {\n  const {\n    theme,\n    client,\n    containerType,\n    accountAbstraction,\n    onConnect,\n    onClose,\n    siweAuth,\n  } = props;\n  const wallet = useActiveWallet();\n  const needsAuth = wallet && siweAuth.requiresAuth && !siweAuth.isLoggedIn;\n  const [modalState, setModalState] = useState<ModalState>(\n    needsAuth ? { screen: \"auth\" } : { screen: \"base\" },\n  );\n  const wallets = props.wallets || getDefaultWallets(props);\n  const inAppWallet = wallets.find((wallet) => wallet.id === \"inApp\") as\n    | Wallet<\"inApp\">\n    | undefined;\n  const externalWallets = wallets.filter((wallet) => wallet.id !== \"inApp\");\n  const showBranding = props.connectModal?.showThirdwebBranding !== false;\n  const connectionManager = useConnectionManager();\n\n  const connector = useCallback(\n    async (args: {\n      wallet: Wallet;\n      connectFn: (chain?: Chain) => Promise<Wallet>;\n      authMethod?: InAppWalletAuth;\n    }) => {\n      setModalState({\n        screen: \"connecting\",\n        wallet: args.wallet,\n        authMethod: args.authMethod,\n      });\n      try {\n        const w = await args.connectFn(props.chain);\n        await connectionManager.connect(w, {\n          client,\n          accountAbstraction,\n          onConnect,\n        });\n        if (siweAuth.requiresAuth && !siweAuth.isLoggedIn) {\n          // if in-app wallet, signin headlessly\n          // TODO (rn) handle signless smart wallets as well\n          if (w.id === \"inApp\") {\n            await siweAuth.doLogin();\n            onClose?.();\n          } else {\n            setModalState({\n              screen: \"auth\",\n            });\n          }\n        } else {\n          onClose?.();\n        }\n      } catch (error) {\n        setModalState({\n          screen: \"error\",\n          error: (error as Error)?.message || \"Unknown error\",\n        });\n      }\n    },\n    [\n      client,\n      accountAbstraction,\n      onConnect,\n      onClose,\n      siweAuth,\n      connectionManager,\n      props.chain,\n    ],\n  );\n\n  let content: JSX.Element;\n\n  switch (modalState.screen) {\n    case \"otp\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() => setModalState({ screen: \"base\" })}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          <Spacer size=\"xl\" />\n          <View\n            style={{\n              flexDirection: \"column\",\n              gap: spacing.md,\n              paddingHorizontal: containerType === \"modal\" ? spacing.lg : 0,\n            }}\n          >\n            <OtpLogin\n              auth={modalState.auth}\n              wallet={modalState.wallet}\n              client={client}\n              setScreen={setModalState}\n              theme={theme}\n              connector={connector}\n            />\n          </View>\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"md\" />\n          )}\n        </>\n      );\n      break;\n    }\n    case \"external_wallets\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() => setModalState({ screen: \"base\" })}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          <Spacer size=\"lg\" />\n          <ExternalWalletsList\n            theme={theme}\n            externalWallets={externalWallets}\n            client={client}\n            connector={connector}\n            containerType={containerType}\n            showAllWalletsButton={props.showAllWallets !== false}\n            onShowAllWallets={() => setModalState({ screen: \"all_wallets\" })}\n          />\n        </>\n      );\n      break;\n    }\n    case \"all_wallets\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() =>\n              inAppWallet\n                ? setModalState({ screen: \"external_wallets\" })\n                : setModalState({ screen: \"base\" })\n            }\n            title={props.connectModal?.title || \"Select Wallet\"}\n          />\n          <Spacer size=\"lg\" />\n          <AllWalletsList\n            theme={theme}\n            externalWallets={externalWallets}\n            client={client}\n            connector={connector}\n            containerType={containerType}\n          />\n        </>\n      );\n      break;\n    }\n    case \"connecting\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() => setModalState({ screen: \"base\" })}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"lg\" />\n          )}\n          <WalletLoadingView\n            theme={theme}\n            wallet={modalState.wallet}\n            client={client}\n            authProvider={modalState.authMethod}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"md\" />\n          )}\n        </>\n      );\n      break;\n    }\n    case \"passkey\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() => setModalState({ screen: \"base\" })}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"lg\" />\n          )}\n          <PasskeyView\n            wallet={modalState.wallet}\n            client={client}\n            setScreen={setModalState}\n            theme={theme}\n            connector={connector}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"md\" />\n          )}\n        </>\n      );\n      break;\n    }\n    case \"auth\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={props.onClose}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"lg\" />\n          )}\n          <SignInView\n            theme={theme}\n            client={client}\n            siweAuth={siweAuth}\n            onSignIn={() => props.onClose?.()}\n            onError={(error) => setModalState({ screen: \"error\", error })}\n            onDisconnect={() => setModalState({ screen: \"base\" })}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"md\" />\n          )}\n        </>\n      );\n      break;\n    }\n    case \"error\": {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            onBack={() => setModalState({ screen: \"base\" })}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"lg\" />\n          )}\n          <ErrorView theme={theme} title={modalState.error} />\n          {containerType === \"modal\" ? (\n            <View style={{ flex: 1 }} />\n          ) : (\n            <Spacer size=\"md\" />\n          )}\n        </>\n      );\n      break;\n    }\n    default: {\n      content = (\n        <>\n          <Header\n            theme={theme}\n            onClose={props.onClose}\n            containerType={containerType}\n            title={props.connectModal?.title || \"Sign in\"}\n          />\n          {inAppWallet ? (\n            <>\n              {containerType === \"modal\" ? (\n                <View style={{ flex: 1 }} />\n              ) : (\n                <Spacer size=\"lg\" />\n              )}\n              <View\n                style={{\n                  flexDirection: \"column\",\n                  gap: spacing.md,\n                  paddingHorizontal: containerType === \"modal\" ? spacing.lg : 0,\n                }}\n              >\n                <InAppWalletUI\n                  wallet={inAppWallet}\n                  setScreen={setModalState}\n                  client={client}\n                  theme={theme}\n                  connector={connector}\n                />\n                {externalWallets.length > 0 ? (\n                  <>\n                    <OrDivider theme={theme} />\n                    <ThemedButtonWithIcon\n                      theme={theme}\n                      icon={WALLET_ICON}\n                      title=\"Connect a wallet\"\n                      onPress={() =>\n                        setModalState({ screen: \"external_wallets\" })\n                      }\n                    />\n                  </>\n                ) : null}\n              </View>\n              {containerType === \"modal\" ? (\n                <View style={{ flex: 1 }} />\n              ) : (\n                <Spacer size=\"md\" />\n              )}\n            </>\n          ) : externalWallets.length > 0 ? (\n            <>\n              <Spacer size=\"xl\" />\n              <View\n                style={{\n                  flex: 1,\n                }}\n              >\n                <ExternalWalletsList\n                  theme={theme}\n                  externalWallets={externalWallets}\n                  client={client}\n                  connector={connector}\n                  containerType={containerType}\n                  showAllWalletsButton={props.showAllWallets !== false}\n                  onShowAllWallets={() =>\n                    setModalState({ screen: \"all_wallets\" })\n                  }\n                />\n              </View>\n            </>\n          ) : null}\n        </>\n      );\n    }\n  }\n\n  return (\n    <ThemedView\n      theme={theme}\n      style={\n        containerType === \"modal\"\n          ? styles.modalContainer\n          : styles.embedContainer\n      }\n    >\n      {content}\n      {showBranding && <PoweredByThirdweb theme={theme} />}\n    </ThemedView>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "createWalletConnectClient"
    },
    "content": "/**\n * Creates a new WalletConnect client for interacting with another application.\n * @param options - The options to use to create the WalletConnect client.\n *\n * @returns The WalletConnect client. Use this client to connect to a WalletConnect URI with {@link createWalletConnectSession}.\n * @example\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n * ```\n * Pass custom handlers:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   requestHandlers: {\n *     eth_signTransaction: ({ account, chainId, params }) => {\n *       // handle transaction signing\n *     },\n *   },\n * });\n * ```\n * Pass connect and disconnect callbacks:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   onConnect: (session) => {\n *     console.log(\"Connected to WalletConnect\", session);\n *   },\n *   onDisconnect: (session) => {\n *     console.log(\"Disconnected from WalletConnect\", session);\n *   },\n * });\n * ```\n * @wallet\n */\nexport async function createWalletConnectClient(\n  options: CreateWalletConnectClientOptions,\n): Promise<WalletConnectClient> {\n  const {\n    wallet,\n    requestHandlers,\n    onConnect,\n    onDisconnect,\n    client: thirdwebClient,\n  } = options;\n  const chains = (() => {\n    if (options.chains && options.chains.length > 10) {\n      console.warn(\n        \"WalletConnect: Can specify no more than 10 chains, truncating to the first 10 provided chains...\",\n      );\n      return options.chains.slice(0, 10);\n    }\n    return options.chains;\n  })();\n\n  if (walletConnectClientCache.has(thirdwebClient)) {\n    return walletConnectClientCache.get(thirdwebClient) as WalletConnectClient;\n  }\n\n  initializeSessionStore({ clientId: options.client.clientId });\n\n  const defaults = getDefaultAppMetadata();\n  const walletConnectClient = await SignClient.init({\n    projectId: options.projectId ?? DEFAULT_PROJECT_ID,\n    metadata: {\n      name: options.appMetadata?.name ?? defaults.name,\n      url: options.appMetadata?.url ?? defaults.url,\n      description: options.appMetadata?.description ?? defaults.description,\n      icons: [options.appMetadata?.logoUrl ?? defaults.logoUrl],\n    },\n  });\n\n  walletConnectClient.on(\n    \"session_proposal\",\n    async (event: WalletConnectSessionProposalEvent) => {\n      const { onSessionProposal } = await import(\"./session-proposal.js\");\n      await onSessionProposal({\n        wallet,\n        walletConnectClient,\n        event,\n        chains,\n        onConnect,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_request\",\n    async (event: WalletConnectSessionRequestEvent) => {\n      const { fulfillRequest } = await import(\"./session-request.js\");\n      await fulfillRequest({\n        wallet,\n        walletConnectClient,\n        event,\n        handlers: requestHandlers,\n        thirdwebClient,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_event\",\n    async (_event: WalletConnectSessionEvent) => {\n      // TODO (accountsChanged, chainChanged)\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_ping\",\n    (_event: { id: number; topic: string }) => {\n      // TODO\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_delete\",\n    async (event: { id: number; topic: string }) => {\n      await disconnectWalletConnectSession({\n        session: { topic: event.topic },\n        walletConnectClient,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  // Disconnects can come from the user or the connected app, so we inject the callback to ensure its always triggered\n  const _disconnect = walletConnectClient.disconnect;\n  walletConnectClient.disconnect = async (args) => {\n    const result = await _disconnect(args).catch(() => {\n      // no-op if already disconnected\n    });\n\n    if (onDisconnect) {\n      disconnectHook({ topic: args.topic, onDisconnect });\n    }\n    return result;\n  };\n\n  walletConnectClientCache.set(options.client, walletConnectClient);\n\n  return walletConnectClient;\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "SignupScreen"
    },
    "content": "function SignupScreen(props: {\n  wallet: Wallet;\n  done: () => void;\n  client: ThirdwebClient;\n  chain?: Chain;\n  isLinking?: boolean;\n}) {\n  const { wallet, done, client, chain } = props;\n  const [error, setError] = useState<string | undefined>();\n  const [status, setStatus] = useState<\"loading\" | \"error\">(\"loading\");\n  const ecosystem = isEcosystemWallet(wallet)\n    ? {\n        id: wallet.id,\n        partnerId: wallet.getConfig()?.partnerId,\n      }\n    : undefined;\n\n  async function signup() {\n    setStatus(\"loading\");\n    try {\n      if (props.isLinking) {\n        await linkProfile({\n          client,\n          strategy: \"passkey\",\n          type: \"sign-up\",\n          ecosystem,\n        });\n      } else {\n        await wallet.connect({\n          client: client,\n          strategy: \"passkey\",\n          type: \"sign-up\",\n          chain,\n        });\n        await setLastAuthProvider(\"passkey\", webLocalStorage);\n      }\n      done();\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setError(`Error creating passkey: ${e.message}`);\n      }\n      setStatus(\"error\");\n    }\n  }\n\n  const triggered = useRef(false);\n  useEffect(() => {\n    if (triggered.current) {\n      return;\n    }\n\n    triggered.current = true;\n    signup();\n  });\n\n  if (status === \"loading\") {\n    return (\n      <LoadingState\n        title=\"Creating Passkey\"\n        subtitle=\"A pop-up prompt will appear to sign-in and verify your passkey\"\n        icon={<FingerPrintIcon size={iconSize.xxl} />}\n      />\n    );\n  }\n\n  if (status === \"error\") {\n    return (\n      <>\n        <ErrorState\n          onTryAgain={signup}\n          title={error || \"Failed to create passkey\"}\n        />\n        <Spacer y=\"lg\" />\n      </>\n    );\n  }\n\n  return null;\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "const InAppWalletConnectUI = /* @__PURE__ */ lazy(\n  () => import(\"../../../wallets/in-app/InAppWalletConnectUI.js\"),\n);"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "const InAppWalletConnectUI = /* @__PURE__ */ lazy(\n  () => import(\"../../../wallets/in-app/InAppWalletConnectUI.js\"),\n);"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "useAutoConnect"
    },
    "content": "/**\n * Autoconnect the last previously connected wallet.\n *\n * @example\n * ```tsx\n * import { useAutoConnect } from \"thirdweb/react\";\n *\n * const { data: autoConnected, isLoading } = useAutoConnect({\n *  client,\n *  accountAbstraction,\n *  wallets,\n *  onConnect,\n *  timeout,\n * });\n * ```\n * @walletConnection\n * @param props - The props for auto connect.\n * @returns whether the auto connect was successful.\n */\nexport function useAutoConnect(props: AutoConnectProps) {\n  return useAutoConnectCore(\n    nativeLocalStorage,\n    {\n      ...props,\n      wallets: props.wallets || getDefaultWallets(props),\n    },\n    createWallet,\n  );\n}"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "ConnectButton_detailsButtonOptions"
    },
    "content": "/**\n * Options for configuring the `ConnectButton`'s Details Button\n * @connectWallet\n */\nexport type ConnectButton_detailsButtonOptions = {\n  /**\n   * CSS class to apply to the details button element\n   */\n  className?: string;\n\n  /**\n   * CSS styles to apply to the details button element\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Render a custom button to display connected wallet details instead of the default one\n   *\n   * ```tsx\n   * <ConnectButton\n   *  detailsButton={{\n   *    render() {\n   *      return <button> .... </button>\n   *    }\n   *  }}\n   * />\n   * ```\n   */\n  render?: () => JSX.Element;\n\n  /**\n   * Display the balance of a token instead of the native token in `ConnectButton` details button.\n   * @example\n   * ```tsx\n   * <ConnectButton detailsButton={{\n   *    displayBalanceToken:{\n   *      // show USDC balance when connected to Ethereum mainnet or Polygon\n   *      [ethereum.id]: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n   *      [polygon.id]: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\",\n   *    }\n   *  })\n   * />\n   * ```\n   */\n  displayBalanceToken?: Record<number, string>;\n\n  /**\n   * Render custom UI for the connected wallet name in the `ConnectButton` details button, overriding ENS name or wallet address.\n   */\n  connectedAccountName?: React.ReactNode;\n\n  /**\n   * Use custom avatar URL for the connected wallet image in the `ConnectButton` details button, overriding ENS avatar or Blobbie icon.\n   */\n  connectedAccountAvatarUrl?: string;\n\n  /**\n   * Show the token balance's value in fiat.\n   * Note: Not all tokens are resolvable to a fiat value. In that case, nothing will be shown.\n   */\n  showBalanceInFiat?: SupportedFiatCurrency;\n};"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "getBuyWithFiatHistory"
    },
    "content": "/**\n * Get the \"Buy with fiat\" transaction history for a given wallet address\n * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyWithFiatHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * // get the 10 latest \"Buy with fiat\" transactions dony by the wallet\n * const history = await getBuyWithFiatHistory({\n *  client: client,\n *  walletAddress: '0x...',\n *  start: 0,\n *  count: 10,\n * })\n * ```\n * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @buyCrypto\n */\nexport async function getBuyWithFiatHistory(\n  params: BuyWithFiatHistoryParams,\n): Promise<BuyWithFiatHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the BuyWithFiatStatus response interface\n    if (!response.ok) {\n      const error = await response.text().catch(() => null);\n      throw new Error(\n        `HTTP error! status: ${response.status} - ${response.statusText}: ${error || \"unknown error\"}`,\n      );\n    }\n\n    const data: BuyWithFiatHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "export const wallet = {\n  id: \"walletConnect\",\n  name: \"WalletConnect\",\n  homepage: \"https://walletconnect.com\",\n  app: {\n    browser: null,\n    ios: null,\n    android: null,\n    mac: null,\n    windows: null,\n    linux: null,\n    chrome: null,\n    firefox: null,\n    safari: null,\n    edge: null,\n    opera: null,\n  },\n  rdns: null,\n  mobile: {\n    native: null,\n    universal: null,\n  },\n  desktop: {\n    native: null,\n    universal: null,\n  },\n} as const;"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "CoinbaseSDKWalletConnectionOptions"
    },
    "content": "/**\n * Options for connecting to the CoinbaseSDK Wallet\n */\nexport type CoinbaseSDKWalletConnectionOptions = {\n  /**\n   * The Thirdweb client object\n   */\n  client: ThirdwebClient;\n\n  /**\n   * If you want the wallet to be connected to a specific blockchain, you can pass a `Chain` object to the `connect` method.\n   * This will trigger a chain switch if the wallet provider is not already connected to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain.\n   *\n   * ```ts\n   * import { defineChain } from \"thirdweb\";\n   * const myChain = defineChain(myChainId);\n   *\n   * const address = await wallet.connect({ chain: myChain })\n   */\n  chain?: Chain;\n};"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "CoinbaseSDKWalletConnectionOptions"
    },
    "content": "/**\n * Options for connecting to the CoinbaseSDK Wallet\n */\nexport type CoinbaseSDKWalletConnectionOptions = {\n    /**\n     * The Thirdweb client object\n     */\n    client: ThirdwebClient;\n    /**\n     * If you want the wallet to be connected to a specific blockchain, you can pass a `Chain` object to the `connect` method.\n     * This will trigger a chain switch if the wallet provider is not already connected to the specified chain.\n     *\n     * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n     * At minimum, you need to pass the `id` of the blockchain.\n     *\n     * ```ts\n     * import { defineChain } from \"thirdweb\";\n     * const myChain = defineChain(myChainId);\n     *\n     * const address = await wallet.connect({ chain: myChain })\n     */\n    chain?: Chain;\n};"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "WalletSwitcherConnectionScreen"
    },
    "content": "export function WalletSwitcherConnectionScreen(\n  props: WalletSwitcherConnectionScreenProps,\n) {\n  const walletChain = useActiveWalletChain();\n  const connectedWallets = useConnectedWallets();\n  const wallets =\n    props.wallets ||\n    getDefaultWallets({\n      appMetadata: props.appMetadata,\n      chains: props.chains,\n    }).filter((w) => w.id !== \"inApp\");\n\n  const screenSetup = useSetupScreen({\n    size: \"compact\",\n    welcomeScreen: undefined,\n    wallets: wallets,\n  });\n\n  return (\n    <ConnectModalContent\n      accountAbstraction={props.accountAbstraction}\n      auth={undefined}\n      chain={props.chain || walletChain}\n      chains={props.chains}\n      client={props.client}\n      connectLocale={props.connectLocale}\n      hideHeader={props.isEmbed}\n      isOpen={true}\n      meta={{\n        showThirdwebBranding: false,\n      }}\n      onClose={() => {}}\n      onConnect={(w) => {\n        props.onSelect(w);\n        props.onBack();\n      }}\n      recommendedWallets={props.recommendedWallets}\n      screenSetup={screenSetup}\n      welcomeScreen={undefined}\n      wallets={wallets}\n      setModalVisibility={() => {}}\n      shouldSetActive={false}\n      showAllWallets={props.showAllWallets}\n      size=\"compact\"\n      walletConnect={props.walletConnect}\n      modalHeader={{\n        title: \"Connect\",\n        onBack: props.onBack,\n      }}\n      walletIdsToHide={connectedWallets.map((x) => x.id)}\n    />\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "ConnectButton"
    },
    "content": "/**\n * A fully featured wallet connection component that allows to:\n *\n * - Connect to 500+ external wallets\n * - Connect with email, phone, passkey or socials\n * - Convert any wallet to a ERC4337 smart wallet for gasless transactions\n * - Sign in with ethereum (Auth)\n *\n * Once connected, the component allows to:\n *\n * - Reolve ENS names and avatars\n * - Manage multipple connected wallets\n * - Send and receive native tokens and ERC20 tokens\n * - View ERC20 tokens and NFTs\n * - Onramp, bridge and swap tokens\n * - Switch chains\n * - Connect to another app with WalletConnect\n *\n * @example\n *\n * ## Default setup\n *\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { ConnectButton } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * <ConnectButton\n *    client={client}\n * />\n * ```\n *\n * [View all available config options](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n *\n * ## Customization options\n *\n * ### Customizing wallet options\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    wallets={[\n *      createWallet(\"io.metamask\"),\n *      createWallet(\"com.coinbase.wallet\"),\n *      createWallet(\"me.rainbow\"),\n *    ]}\n * />\n * ```\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n * ### Customizing the default chain to connect to\n *\n * ```tsx\n * import { sepolia } from \"thirdweb/chains\";\n *\n * <ConnectButton\n *   client={client}\n *   chain={sepolia}\n * />\n * ```\n *\n * ### Enabling Account Abstraction\n *\n * By passing the `accountAbstraction` prop, ALL connected wallets will be converted to smart accounts.\n * And by setting `sponsorGas` to `true`, all transactions done with those smart accounts will be sponsored.\n *\n * ```tsx\n * <ConnectButton\n * client={client}\n * accountAbstraction={{\n *   chain: sepolia,\n *   sponsorGas: true,\n * }}\n * />;\n * ```\n *\n * Note that this prop doesn't affect ecosystem wallets. Ecosystem wallets will only be converted to smart accounts if the ecosystem owner has enabled account abstraction.\n *\n * ### Enabling sign in with ethereum (Auth)\n *\n * ```tsx\n * <ConnectButton\n * client={client}\n * auth={{\n *   isLoggedIn: async (address) => {\n *     console.log(\"checking if logged in!\", { address });\n *     return await isLoggedIn();\n *   },\n *   doLogin: async (params) => {\n *     console.log(\"logging in!\");\n *     await login(params);\n *   },\n *   getLoginPayload: async ({ address }) =>\n *     generatePayload({ address }),\n *   doLogout: async () => {\n *     console.log(\"logging out!\");\n *     await logout();\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing the theme\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    theme=\"light\"\n * />\n * ```\n *\n * For more granular control, you can also pass a custom theme object:\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    theme={lightTheme({\n *      colors: {\n *        modalBg: \"red\",\n *      },\n *    })}\n * />\n * ```\n *\n * [View all available themes properties](https://portal.thirdweb.com/references/typescript/v5/Theme)\n *\n * ### Changing the display language\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    locale=\"ja_JP\"\n * />\n * ```\n *\n * [View all available locales](https://portal.thirdweb.com/references/typescript/v5/LocaleId)\n *\n * ### Customizing the connect button UI\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    connectButton={{\n *      label: \"Sign in to MyApp\",\n *    }}\n * />\n * ```\n *\n * ### Customizing the modal UI\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    connectModal={{\n *      title: \"Sign in to MyApp\",\n *      titleIcon: \"https://example.com/logo.png\",\n *      size: \"compact\",\n *    }}\n * />\n * ```\n *\n * ### Customizing details button UI (after connecting)\n *\n * ```tsx\n * <ConnectButton\n *    client={client}\n *    detailsButton={{\n *      displayBalanceToken: {\n *        [sepolia.id]: \"0x...\", // token address to display balance for\n *        [ethereum.id]: \"0x...\", // token address to display balance for\n *      },\n *    }}\n * />\n * ```\n *\n * [View all available auth helper functions](https://portal.thirdweb.com/references/typescript/v5/createAuth)\n *\n * ### Customizing the Auth sign in button (after connecting, but before authenticating)\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   auth={{ ... }}\n *   signInButton: {\n *     label: \"Authenticate with MyApp\",\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing supported Tokens and NFTs\n *\n * These tokens and NFTs will be shown in the modal when the user clicks \"View Assets\", as well as the send token screen.\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   supportedTokens={{\n *     [ethereum.id]: [\n *       {\n *         address: \"0x...\",\n *         name: \"MyToken\",\n *         symbol: \"MT\",\n *         icon: \"https://example.com/icon.png\",\n *       },\n *     ],\n *   }}\n *   supportedNFTs={{\n *     [ethereum.id]: [\n *       \"0x...\", // nft contract address\n *     ],\n *   }}\n * />\n * ```\n *\n * ### Customizing the orders of the tabs in the [View Funds] screen\n * When you click on \"View Assets\", by default the \"Tokens\" tab is shown first.\n * If you want to show the \"NFTs\" tab first, change the order of the asset tabs to: [\"nft\", \"token\"]\n * Note: If an empty array is passed, the [View Funds] button will be hidden\n *\n * ```tsx\n * <ConnectButton\n *   client={client}\n *   detailsModal={{\n *     assetTabs: [\"nft\", \"token\"],\n *   }}\n * />\n * ```\n *\n * ### Callback for when the details modal is closed\n * ```tsx\n * <ConnectButton\n *   detailsModal={{\n *     onClose: (screen: string) => {\n *       console.log({ screen });\n *     }\n *   }}\n * />\n * ```\n *\n * @param props\n * Props for the `ConnectButton` component\n *\n * Refer to [ConnectButtonProps](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available props.\n *\n * @returns A JSX element that renders the <ConnectButton> component.\n *\n * @component\n * @walletConnection\n */\nexport function ConnectButton(props: ConnectButtonProps) {\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const connectionManager = useConnectionManager();\n\n  usePreloadWalletProviders({\n    wallets,\n  });\n\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.chain) {\n      connectionManager.defineChains([props.chain]);\n    }\n  }, [props.chain, connectionManager]);\n\n  useEffect(() => {\n    if (props.chains) {\n      connectionManager.defineChains(props.chains);\n    }\n  }, [props.chains, connectionManager]);\n\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.connectModal?.size || \"compact\";\n  }, [wallets.length, props.connectModal?.size]);\n\n  const preferredChain =\n    props.accountAbstraction?.chain || props.chain || props.chains?.[0];\n\n  const autoConnectComp = props.autoConnect !== false && (\n    <AutoConnect\n      chain={preferredChain}\n      appMetadata={props.appMetadata}\n      client={props.client}\n      wallets={wallets}\n      timeout={\n        typeof props.autoConnect === \"boolean\"\n          ? undefined\n          : props.autoConnect?.timeout\n      }\n      accountAbstraction={props.accountAbstraction}\n      onConnect={props.onConnect}\n    />\n  );\n\n  if (!localeQuery.data) {\n    const combinedClassName = `${props.connectButton?.className || \"\"} ${TW_CONNECT_WALLET}`;\n    return (\n      <AnimatedButton\n        disabled={true}\n        className={combinedClassName}\n        variant=\"primary\"\n        type=\"button\"\n        style={{\n          minWidth: \"165px\",\n          height: \"50px\",\n          ...props.connectButton?.style,\n        }}\n      >\n        {autoConnectComp}\n        <Spinner size=\"sm\" color=\"primaryButtonText\" />\n      </AnimatedButton>\n    );\n  }\n\n  return (\n    <WalletUIStatesProvider theme={props.theme} isOpen={false}>\n      <ConnectButtonInner {...props} connectLocale={localeQuery.data} />\n      <ConnectModal\n        shouldSetActive={true}\n        accountAbstraction={props.accountAbstraction}\n        auth={props.auth}\n        chain={preferredChain}\n        chains={props.chains}\n        client={props.client}\n        connectLocale={localeQuery.data}\n        meta={{\n          title: props.connectModal?.title,\n          titleIconUrl: props.connectModal?.titleIcon,\n          showThirdwebBranding: props.connectModal?.showThirdwebBranding,\n          termsOfServiceUrl: props.connectModal?.termsOfServiceUrl,\n          privacyPolicyUrl: props.connectModal?.privacyPolicyUrl,\n          requireApproval: props.connectModal?.requireApproval,\n        }}\n        welcomeScreen={props.connectModal?.welcomeScreen}\n        size={size}\n        localeId={props.locale || \"en_US\"}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        showAllWallets={props.showAllWallets}\n        walletConnect={props.walletConnect}\n        wallets={wallets}\n      />\n      {autoConnectComp}\n    </WalletUIStatesProvider>\n  );\n}"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "WalletAuth"
    },
    "content": "export function WalletAuth(props: {\n  wallet: Wallet<\"inApp\" | EcosystemWalletId>;\n  chain: Chain | undefined;\n  client: ThirdwebClient;\n  done: () => void;\n  size: \"compact\" | \"wide\";\n  locale: ConnectLocale;\n  inAppLocale: InAppWalletLocale;\n  onBack: () => void;\n  walletConnect: { projectId?: string } | undefined;\n  isLinking: boolean;\n  meta?: {\n    title?: string;\n    titleIconUrl?: string;\n    showThirdwebBranding?: boolean;\n    termsOfServiceUrl?: string;\n    privacyPolicyUrl?: string;\n  };\n}) {\n  const { wallet, done } = props;\n  const addConnectedWallet = useAddConnectedWallet();\n  const walletToConnect = useRef<Wallet>(undefined);\n  const [status, setStatus] = useState<\"loading\" | \"error\" | \"selecting\">(\n    \"selecting\",\n  );\n  const [error, setError] = useState<string | undefined>();\n  const [showAll, setShowAll] = useState<boolean>(false);\n  const ecosystem = isEcosystemWallet(wallet)\n    ? {\n        id: wallet.id,\n        partnerId: wallet.getConfig()?.partnerId,\n      }\n    : undefined;\n\n  const back = () => {\n    setStatus(\"selecting\");\n    walletToConnect.current = undefined;\n    props.onBack();\n  };\n\n  async function login(walletToLink: Wallet) {\n    setStatus(\"loading\");\n    setError(undefined);\n    walletToConnect.current = walletToLink;\n    try {\n      if (props.isLinking) {\n        await linkProfile({\n          client: props.client,\n          strategy: \"wallet\",\n          wallet: walletToLink,\n          chain: props.chain || wallet.getChain() || defineChain(1),\n          ecosystem,\n        });\n      } else {\n        await wallet.connect({\n          client: props.client,\n          strategy: \"wallet\",\n          wallet: walletToLink,\n          chain: props.chain || walletToLink.getChain() || defineChain(1),\n        });\n      }\n      addConnectedWallet(walletToLink);\n      done();\n    } catch (e) {\n      setError(e instanceof Error ? e.message : \"Unknown error\");\n      setStatus(\"error\");\n    }\n  }\n\n  if (!walletToConnect.current) {\n    if (showAll) {\n      return (\n        <Suspense fallback={<LoadingScreen />}>\n          <AllWalletsUI\n            onBack={() => setShowAll(false)}\n            onSelect={async (newWallet) => {\n              login(newWallet);\n              setShowAll(false);\n            }}\n            client={props.client}\n            connectLocale={props.locale}\n            recommendedWallets={undefined}\n            specifiedWallets={[]}\n            size={props.size}\n            disableSelectionDataReset={true}\n          />\n        </Suspense>\n      );\n    }\n    return (\n      <WalletSelector\n        title={props.locale.connectAWallet}\n        wallets={getDefaultWallets()}\n        selectWallet={async (newWallet) => {\n          login(newWallet);\n        }}\n        onShowAll={() => {\n          setShowAll(true);\n        }}\n        done={() => {}}\n        goBack={back}\n        setModalVisibility={() => {}}\n        client={props.client}\n        connectLocale={props.locale}\n        hideHeader={false}\n        recommendedWallets={undefined}\n        chain={wallet.getChain()}\n        showAllWallets={true}\n        chains={[]}\n        size={props.size}\n        meta={props.meta || {}}\n        walletConnect={props.walletConnect}\n        modalHeader={{\n          title: props.isLinking\n            ? props.inAppLocale.linkWallet\n            : props.inAppLocale.signInWithWallet,\n          onBack: back,\n        }}\n        walletIdsToHide={[\"inApp\"]}\n        disableSelectionDataReset={true}\n      />\n    );\n  }\n\n  return (\n    <Container animate=\"fadein\" fullHeight flex=\"column\">\n      <Container p=\"lg\">\n        <ModalHeader\n          title={\n            props.isLinking\n              ? props.inAppLocale.linkWallet\n              : props.inAppLocale.signInWithWallet\n          }\n          onBack={back}\n        />\n      </Container>\n\n      <Container\n        px={props.size === \"wide\" ? \"xxl\" : \"lg\"}\n        expand\n        flex=\"column\"\n        center=\"y\"\n      >\n        <div>\n          {status === \"error\" ? (\n            <>\n              <ErrorState\n                onTryAgain={() => {\n                  if (!walletToConnect.current) {\n                    throw new Error(\"Failed to connect to unknown wallet\");\n                  }\n                  login(walletToConnect.current);\n                }}\n                title={error || \"Failed to Login\"}\n              />\n              <Spacer y=\"lg\" />\n            </>\n          ) : (\n            <>\n              <LoadingState\n                title=\"Sign in with your wallet\"\n                subtitle=\"A pop-up prompt will appear to sign-in and verify your wallet\"\n                icon={\n                  <WalletImage\n                    id={walletToConnect.current.id ?? \"\"}\n                    size={iconSize.xl}\n                    client={props.client}\n                  />\n                }\n              />\n            </>\n          )}\n        </div>\n      </Container>\n    </Container>\n  );\n}"
  },
  {
    "metadata": {
      "type": "type",
      "functionOrClassName": "PaymentInfo"
    },
    "content": "export type PaymentInfo = {\n  /**\n   * The chain to receive the payment on.\n   */\n  chain: Chain;\n  /**\n   * The address of the seller wallet to receive the payment on.\n   */\n  sellerAddress: string;\n  /**\n   * Optional ERC20 token to receive the payment on.\n   * If not provided, the native token will be used.\n   */\n  token?: TokenInfo;\n  /**\n   * For direct transfers, specify who will pay the transfer fee. Can be \"sender\" or \"receiver\".\n   */\n  feePayer?: \"sender\" | \"receiver\";\n} & (\n  | {\n      /**\n       * The amount of tokens to receive in ETH or tokens.\n       * ex: 0.1 ETH or 100 USDC\n       */\n      amount: string;\n    }\n  | {\n      /**\n       * The amount of tokens to receive in wei.\n       * ex: 1000000000000000000 wei\n       */\n      amountWei: bigint;\n    }\n);"
  },
  {
    "metadata": {
      "type": "function",
      "functionOrClassName": "SwapSummary"
    },
    "content": "export function SwapSummary(props: {\n  sender: string;\n  receiver: string;\n  client: ThirdwebClient;\n  fromToken: ERC20OrNativeToken;\n  fromChain: Chain;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  fromAmount: string;\n  toAmount: string;\n}) {\n  const theme = useCustomTheme();\n  const isDifferentRecipient =\n    props.receiver.toLowerCase() !== props.sender.toLowerCase();\n  return (\n    <Container>\n      {/* Sell */}\n      <Container\n        bg=\"tertiaryBg\"\n        flex=\"column\"\n        style={{\n          borderRadius: radius.lg,\n          border: `1px solid ${theme.colors.borderColor}`,\n        }}\n      >\n        <Container\n          flex=\"row\"\n          gap=\"sm\"\n          p=\"sm\"\n          style={{\n            borderBottom: `1px solid ${theme.colors.borderColor}`,\n          }}\n        >\n          <WalletRow\n            address={props.sender}\n            client={props.client}\n            iconSize=\"md\"\n            textSize=\"sm\"\n          />\n        </Container>\n        <TokenRow\n          token={props.fromToken}\n          chain={props.fromChain}\n          client={props.client}\n          isLoading={false}\n          value={props.fromAmount}\n          freezeChainAndToken={true}\n          onSelectToken={() => {}}\n          style={{\n            background: \"transparent\",\n            borderRadius: 0,\n            border: \"none\",\n          }}\n        />\n      </Container>\n      {/* Connector Icon */}\n      <StepConnectorArrow />\n      {/* Buy */}\n      <Container\n        flex=\"column\"\n        bg=\"tertiaryBg\"\n        style={{\n          borderRadius: radius.lg,\n          border: `1px solid ${theme.colors.borderColor}`,\n        }}\n      >\n        {isDifferentRecipient && (\n          <Container\n            flex=\"row\"\n            gap=\"sm\"\n            p=\"sm\"\n            style={{\n              borderBottom: `1px solid ${theme.colors.borderColor}`,\n            }}\n          >\n            <WalletRow\n              address={props.receiver}\n              client={props.client}\n              iconSize=\"md\"\n              textSize=\"sm\"\n            />\n          </Container>\n        )}\n        <TokenRow\n          token={props.toToken}\n          chain={props.toChain}\n          client={props.client}\n          isLoading={false}\n          value={props.toAmount}\n          freezeChainAndToken={true}\n          onSelectToken={() => {}}\n          style={{\n            background: \"transparent\",\n            borderRadius: 0,\n            border: \"none\",\n          }}\n        />\n      </Container>\n    </Container>\n  );\n}"
  },
  {
    "metadata": {
      "type": "variable"
    },
    "content": "export const SetConnectedWallet = (props: { id?: WalletId }) => {\n  const { id } = props;\n  const connectStarted = useRef(false);\n  const { connect } = useConnect();\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: legit use case\n  useEffect(() => {\n    if (connectStarted.current) {\n      return;\n    }\n\n    connectStarted.current = true;\n\n    const wallet = createWalletAdapter({\n      adaptedAccount: TEST_ACCOUNT_A,\n      client: TEST_CLIENT,\n      chain: ethereum,\n      onDisconnect: () => { },\n      switchChain: () => { },\n    }) as Wallet;\n\n    if (id) {\n      wallet.id = id;\n    }\n\n    connect(wallet);\n  }, []);\n\n  return null;\n};"
  }
]